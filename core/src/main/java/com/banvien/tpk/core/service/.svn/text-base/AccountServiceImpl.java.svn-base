package com.banvien.fcv.core.service;
import com.banvien.fcv.core.dao.AccountDAO;
import com.banvien.fcv.core.dao.GenericDAO;
import com.banvien.fcv.core.domain.Account;
import com.banvien.fcv.core.domain.Account;
import com.banvien.fcv.core.dto.AccountBean;
import com.banvien.fcv.core.dto.AccountBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.HashMap;
import java.util.Map;

public class AccountServiceImpl extends GenericServiceImpl<Account,Long> 
                                                    implements AccountService {

    protected final Log logger = LogFactory.getLog(getClass());

    private AccountDAO accountDAO;

    public void setAccountDAO(AccountDAO accountDAO) {
        this.accountDAO = accountDAO;
    }

    @Override
	protected GenericDAO<Account, Long> getGenericDAO() {
		return accountDAO;
	}

    @Override
    public void updateItem(AccountBean accountBean) throws ObjectNotFoundException, DuplicateException {
        Account dbItem = this.accountDAO.findByIdNoAutoCommit(accountBean.getPojo().getAccountID());
        if (dbItem == null) throw new ObjectNotFoundException("Not found account " + accountBean.getPojo().getAccountID());

        Account pojo = accountBean.getPojo();

        this.accountDAO.detach(dbItem);
        this.accountDAO.update(pojo);
    }

    @Override
    public void addNew(AccountBean accountBean) throws DuplicateException {
        Account pojo = accountBean.getPojo();
        pojo = this.accountDAO.save(pojo);
        accountBean.setPojo(pojo);
    }

    @Override
    public Integer deleteItems(String[] checkList) {
        Integer res = 0;
        if (checkList != null && checkList.length > 0) {
            res = checkList.length;
            for (String id : checkList) {
                accountDAO.delete(Long.parseLong(id));
            }
        }
        return res;
    }

    @Override
    public Object[] search(AccountBean bean) {
        Map<String, Object> properties = new HashMap<String, Object>();

        if (StringUtils.isNotBlank(bean.getPojo().getName())) {
            properties.put(Account.FIELD_NAME, bean.getPojo().getName());
        }

        return this.accountDAO.searchByProperties(properties, bean.getFirstItem(), bean.getMaxPageItems(), bean.getSortExpression(), bean.getSortDirection(), true);
    }
}