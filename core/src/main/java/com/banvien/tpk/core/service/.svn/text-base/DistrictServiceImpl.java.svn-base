package com.banvien.fcv.core.service;
import com.banvien.fcv.core.Constants;
import com.banvien.fcv.core.dao.DistrictDAO;
import com.banvien.fcv.core.dao.GenericDAO;
import com.banvien.fcv.core.domain.District;
import com.banvien.fcv.core.dto.DistrictBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.security.SecurityUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DistrictServiceImpl extends GenericServiceImpl<District,Long>
                                                    implements DistrictService {

    protected final Log logger = LogFactory.getLog(getClass());

    private DistrictDAO districtDAO;

    public void setDistrictDAO(DistrictDAO districtDAO) {
        this.districtDAO = districtDAO;
    }

    @Override
	protected GenericDAO<District, Long> getGenericDAO() {
		return districtDAO;
	}

    @Override
    public void updateItem(DistrictBean districtBean) throws ObjectNotFoundException, DuplicateException {
        District dbItem = this.districtDAO.findByIdNoAutoCommit(districtBean.getPojo().getDistrictID());
        if (dbItem == null) throw new ObjectNotFoundException("Not found district " + districtBean.getPojo().getDistrictID());

        District pojo = districtBean.getPojo();

        this.districtDAO.detach(dbItem);
        this.districtDAO.update(pojo);
    }

    @Override
    public void addNew(DistrictBean districtBean) throws DuplicateException {
        District pojo = districtBean.getPojo();
        pojo = this.districtDAO.save(pojo);
        districtBean.setPojo(pojo);
    }

    @Override
    public Integer deleteItems(String[] checkList) {
        Integer res = 0;
        if (checkList != null && checkList.length > 0) {
            res = checkList.length;
            for (String id : checkList) {
                    districtDAO.delete(Long.parseLong(id));
            }
        }
        return res;
    }

    @Override
    public Object[] search(DistrictBean bean) {
        Map<String, Object> properties = new HashMap<String, Object>();
        StringBuffer whereClause = new StringBuffer();
        if (!SecurityUtils.userHasAuthority(Constants.ADMIN_ROLE)) {
            whereClause.append("region.regionID IN (SELECT region.regionID FROM Userregion WHERE user.userID = ").append(SecurityUtils.getLoginUserId()).append(")");
        }
        if (StringUtils.isNotBlank(bean.getPojo().getName())) {
            properties.put(District.FIELD_NAME, bean.getPojo().getName());
        }

        if (bean.getPojo().getRegion() != null && bean.getPojo().getRegion().getRegionID() != null && bean.getPojo().getRegion().getRegionID() > 0) {
            properties.put("region.regionID", bean.getPojo().getRegion().getRegionID());
        }

        return this.districtDAO.searchByProperties(properties, bean.getFirstItem(), bean.getMaxPageItems(), bean.getSortExpression(), bean.getSortDirection(), true, whereClause.toString());
    }

    @Override
    public List<District> findByRegionID(Long regionID) {
        Map<String, Object> properties = new HashMap<String, Object>();
        properties.put("region.regionID", regionID);
        return districtDAO.findByProperties(properties, "name", Constants.SORT_ASC, true, true);
    }

    @Override
    public List<District> findAllByOnlineAgent() {
        StringBuffer whereClause = new StringBuffer();
        if (!SecurityUtils.userHasAuthority(Constants.ADMIN_ROLE)) {
            whereClause.append("region.regionID IN (SELECT region.regionID FROM Userregion WHERE user.userID = ").append(SecurityUtils.getLoginUserId()).append(")");
        }

        return districtDAO.findByProperties(new HashMap<String, Object>(), "name", Constants.SORT_ASC, true, whereClause.toString());
    }

}