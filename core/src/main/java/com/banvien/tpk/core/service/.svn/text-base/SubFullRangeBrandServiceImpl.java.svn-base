package com.banvien.fcv.core.service;

import com.banvien.fcv.core.dao.GenericDAO;
import com.banvien.fcv.core.dao.SubfullrangebrandDAO;
import com.banvien.fcv.core.domain.SubFullRangeBrand;
import com.banvien.fcv.core.dto.SubFullRangeBrandBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.HashMap;
import java.util.Map;

public class SubFullRangeBrandServiceImpl extends GenericServiceImpl<SubFullRangeBrand,Long>
                                                    implements SubFullRangeBrandService {

    protected final Log logger = LogFactory.getLog(getClass());

    private SubfullrangebrandDAO subFullRangeBrandDAO;

    public SubfullrangebrandDAO getSubFullRangeBrandDAO() {
        return subFullRangeBrandDAO;
    }

    public void setSubFullRangeBrandDAO(SubfullrangebrandDAO subFullRangeBrandDAO) {
        this.subFullRangeBrandDAO = subFullRangeBrandDAO;
    }

    @Override
	protected GenericDAO<SubFullRangeBrand, Long> getGenericDAO() {
		return subFullRangeBrandDAO;
	}

    @Override
    public void updateItem(SubFullRangeBrandBean subFullRangeBrandBean) throws ObjectNotFoundException, DuplicateException {
        SubFullRangeBrand dbItem = this.subFullRangeBrandDAO.findByIdNoAutoCommit(subFullRangeBrandBean.getPojo().getSubFullRangeBrandID());
        if (dbItem == null) throw new ObjectNotFoundException("Not found district " + subFullRangeBrandBean.getPojo().getSubFullRangeBrandID());
        SubFullRangeBrand pojo = subFullRangeBrandBean.getPojo();
        this.subFullRangeBrandDAO.detach(dbItem);
        this.subFullRangeBrandDAO.update(pojo);
    }

    @Override
    public void addNew(SubFullRangeBrandBean subFullRangeBrandBean) throws DuplicateException {
        SubFullRangeBrand pojo = subFullRangeBrandBean.getPojo();
        pojo = this.subFullRangeBrandDAO.save(pojo);
        subFullRangeBrandBean.setPojo(pojo);
    }

    @Override
    public Integer deleteItems(String[] checkList) {
        Integer res = 0;
        if (checkList != null && checkList.length > 0) {
            res = checkList.length;
            for (String id : checkList) {
                subFullRangeBrandDAO.delete(Long.parseLong(id));
            }
        }
        return res;
    }

    @Override
    public Object[] search(SubFullRangeBrandBean subFullRangeBrandBean) {
        Map<String, Object> properties = new HashMap<String, Object>();
        if (StringUtils.isNotBlank(subFullRangeBrandBean.getPojo().getName())) {
            properties.put(SubFullRangeBrand.FIELD_NAME, subFullRangeBrandBean.getPojo().getName());
        }
        return this.subFullRangeBrandDAO.searchByProperties(properties, subFullRangeBrandBean.getFirstItem(), subFullRangeBrandBean.getMaxPageItems(), subFullRangeBrandBean.getSortExpression(), subFullRangeBrandBean.getSortDirection(), true);
    }

}