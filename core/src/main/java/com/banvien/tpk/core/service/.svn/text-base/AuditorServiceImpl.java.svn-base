package com.banvien.fcv.core.service;
import com.banvien.fcv.core.Constants;
import com.banvien.fcv.core.dao.AuditorDAO;
import com.banvien.fcv.core.dao.GenericDAO;
import com.banvien.fcv.core.domain.Auditor;
import com.banvien.fcv.core.domain.Auditor;
import com.banvien.fcv.core.domain.User;
import com.banvien.fcv.core.dto.AuditorBean;
import com.banvien.fcv.core.dto.AuditorBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.security.SecurityUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditorServiceImpl extends GenericServiceImpl<Auditor,Long> 
                                                    implements AuditorService {

    protected final Log logger = LogFactory.getLog(getClass());

    private AuditorDAO auditorDAO;

    public void setAuditorDAO(AuditorDAO auditorDAO) {
        this.auditorDAO = auditorDAO;
    }

    @Override
	protected GenericDAO<Auditor, Long> getGenericDAO() {
		return auditorDAO;
	}

    @Override
    public Auditor findByCode(String code) throws ObjectNotFoundException {
        Auditor res = this.auditorDAO.findEqualUnique(Auditor.FIELD_CODE, code);
        if (res == null) throw new ObjectNotFoundException("Not found auditor with code " + code);
        return res;
    }

    @Override
    public void updateItem(AuditorBean auditorBean) throws ObjectNotFoundException, DuplicateException {
        Auditor dbItem = this.auditorDAO.findByIdNoAutoCommit(auditorBean.getPojo().getAuditorID());
        if (dbItem == null) throw new ObjectNotFoundException("Not found auditor " + auditorBean.getPojo().getAuditorID());

        Auditor pojo = auditorBean.getPojo();
        pojo.setCreatedBy(dbItem.getCreatedBy());

        this.auditorDAO.detach(dbItem);
        this.auditorDAO.update(pojo);
    }

    @Override
    public void addNew(AuditorBean auditorBean) throws DuplicateException {
        Auditor pojo = auditorBean.getPojo();

        User createdBy = new User();
        createdBy.setUserID(SecurityUtils.getLoginUserId());
        pojo.setCreatedBy(createdBy);

        pojo = this.auditorDAO.save(pojo);
        auditorBean.setPojo(pojo);
    }

    @Override
    public Integer deleteItems(String[] checkList) {
        Integer res = 0;
        if (checkList != null && checkList.length > 0) {
            res = checkList.length;
            for (String id : checkList) {
                auditorDAO.delete(Long.parseLong(id));
            }
        }
        return res;
    }

    @Override
    public Object[] search(AuditorBean bean) {
        Map<String, Object> properties = new HashMap<String, Object>();

        if (!SecurityUtils.userHasAuthority(Constants.ADMIN_ROLE)) {
            properties.put("createdBy.userID", SecurityUtils.getLoginUserId());
        }

        if (StringUtils.isNotBlank(bean.getPojo().getCode())) {
            properties.put(Auditor.FIELD_CODE, bean.getPojo().getCode());
        }

        if (StringUtils.isNotBlank(bean.getPojo().getName())) {
            properties.put(Auditor.FIELD_NAME, bean.getPojo().getName());
        }

        return this.auditorDAO.searchByProperties(properties, bean.getFirstItem(), bean.getMaxPageItems(), bean.getSortExpression(), bean.getSortDirection(), true);
    }

    @Override
    public List<Auditor> findByOnlineAgent() {
        Map<String, Object> properties = new HashMap<String, Object>();

        if (!SecurityUtils.userHasAuthority(Constants.ADMIN_ROLE)) {
            properties.put("createdBy.userID", SecurityUtils.getLoginUserId());
        }

        return this.auditorDAO.findByProperties(properties, "code", Constants.SORT_ASC, true, true);
    }
}