package com.banvien.fcv.core.service;
import com.banvien.fcv.core.dao.PackinggroupDAO;
import com.banvien.fcv.core.dao.GenericDAO;
import com.banvien.fcv.core.domain.Packinggroup;
import com.banvien.fcv.core.domain.Packinggroup;
import com.banvien.fcv.core.dto.PackinggroupBean;
import com.banvien.fcv.core.dto.PackinggroupBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.HashMap;
import java.util.Map;

public class PackinggroupServiceImpl extends GenericServiceImpl<Packinggroup,Long> 
                                                    implements PackinggroupService {

    protected final Log logger = LogFactory.getLog(getClass());

    private PackinggroupDAO packinggroupDAO;

    public void setPackinggroupDAO(PackinggroupDAO packinggroupDAO) {
        this.packinggroupDAO = packinggroupDAO;
    }

    @Override
	protected GenericDAO<Packinggroup, Long> getGenericDAO() {
		return packinggroupDAO;
	}

    @Override
    public void updateItem(PackinggroupBean packinggroupBean) throws ObjectNotFoundException, DuplicateException {
        Packinggroup dbItem = this.packinggroupDAO.findByIdNoAutoCommit(packinggroupBean.getPojo().getPackingGroupID());
        if (dbItem == null) throw new ObjectNotFoundException("Not found packinggroup " + packinggroupBean.getPojo().getPackingGroupID());

        Packinggroup pojo = packinggroupBean.getPojo();

        this.packinggroupDAO.detach(dbItem);
        this.packinggroupDAO.update(pojo);
    }

    @Override
    public void addNew(PackinggroupBean packinggroupBean) throws DuplicateException {
        Packinggroup pojo = packinggroupBean.getPojo();
        pojo = this.packinggroupDAO.save(pojo);
        packinggroupBean.setPojo(pojo);
    }

    @Override
    public Integer deleteItems(String[] checkList) {
        Integer res = 0;
        if (checkList != null && checkList.length > 0) {
            res = checkList.length;
            for (String id : checkList) {
                packinggroupDAO.delete(Long.parseLong(id));
            }
        }
        return res;
    }

    @Override
    public Object[] search(PackinggroupBean bean) {
        Map<String, Object> properties = new HashMap<String, Object>();

        if (StringUtils.isNotBlank(bean.getPojo().getName())) {
            properties.put(Packinggroup.FIELD_NAME, bean.getPojo().getName());
        }

        if (bean.getPojo().getSosbrand() != null && bean.getPojo().getSosbrand().getSosBrandID() != null && bean.getPojo().getSosbrand().getSosBrandID() > 0) {
            properties.put("sosbrand.sosBrandID", bean.getPojo().getSosbrand().getSosBrandID());
        }

        return this.packinggroupDAO.searchByProperties(properties, bean.getFirstItem(), bean.getMaxPageItems(), bean.getSortExpression(), bean.getSortDirection(), true);
    }
}