package com.banvien.fcv.core.dao;

import com.banvien.fcv.core.domain.OutletSaleman;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;

import java.sql.SQLException;
import java.util.List;


/**
 * <p>Hibernate DAO layer for Districts</p>
 * <p>Generated at Thu Jun 14 18:28:12 GMT+07:00 2012</p>
 *
 * @author Salto-db Generator v1.1 / EJB3 + Spring/Hibernate DAO
 */
public class OutletSalemanHibernateDAO extends
		AbstractHibernateDAO<OutletSaleman, Long> implements
		OutletSalemanDAO {

    public OutletSalemanHibernateDAO() {
		super(OutletSaleman.class);
	}

    @Override
    public OutletSaleman findByOutletID(final Long outletID) {
        return getHibernateTemplate().execute(
            new HibernateCallback<OutletSaleman>() {
                public OutletSaleman doInHibernate(Session session)
                        throws HibernateException, SQLException {
                    Query query = session.createQuery("FROM OutletSaleman o WHERE o.outlet.outletID = :outletID");
                    query.setParameter("outletID", outletID);
                    try
                    {
                        return (OutletSaleman) query.list().get(0);
                    }
                    catch(Exception ex)
                    {
                        return null;
                    }

                }
            });
    }


    @Override
    public List<OutletSaleman> findListByOutletID(final Long outletID) {
        return getHibernateTemplate().execute(
            new HibernateCallback<List<OutletSaleman>>() {
                public List<OutletSaleman> doInHibernate(Session session)
                        throws HibernateException, SQLException {
                    Query query = session.createQuery("FROM OutletSaleman o WHERE o.outlet.outletID = :outletID");
                    query.setParameter("outletID", outletID);

                    return (List<OutletSaleman>) query.list();


                }
            });
    }

    @Override
    public void deleteByOutlet(final Long outletID) {
        getHibernateTemplate().execute(
            new HibernateCallback<Object>() {
                public Object doInHibernate(Session session)
                        throws HibernateException, SQLException {
                    Query query = session
                            .createQuery("DELETE FROM OutletSaleman WHERE outlet.outletID = :outletID");
                    query.setParameter("outletID", outletID);
                    return query.executeUpdate();
                }
            });
    }

    @Override
    public OutletSaleman findByOutletAndSalemanAndOutletBrand(final Long outletID, final Long salemanID, final Long outletBrandID) {
        return getHibernateTemplate().execute(
            new HibernateCallback<OutletSaleman>() {
                public OutletSaleman doInHibernate(Session session)
                        throws HibernateException, SQLException {
                    Query query = session.createQuery("FROM OutletSaleman o WHERE o.outlet.outletID = :outletID AND o.saleman.salemanID = :salemanID AND o.outletbrand.outletBrandID = :outletBrandID ");
                    query.setParameter("outletID", outletID);
                    query.setParameter("salemanID", salemanID);
                    query.setParameter("outletBrandID", outletBrandID);
                    return (OutletSaleman) query.uniqueResult();
                }
            });
    }

    @Override
    public List<OutletSaleman> findListBySalemanID(final Long salemanID) {
        return getHibernateTemplate().execute(
            new HibernateCallback<List<OutletSaleman>>() {
                public List<OutletSaleman> doInHibernate(Session session)
                        throws HibernateException, SQLException {
                    Query query = session.createQuery("FROM OutletSaleman o WHERE o.saleman.salemanID = :salemanID ");
                    query.setParameter("salemanID", salemanID);
                    try
                    {
                        return (List<OutletSaleman>) query.list();
                    }
                    catch(Exception ex)
                    {
                        return null;
                    }

                }
            });
    }

}
