package com.banvien.fcv.core.service;
import com.banvien.fcv.core.Constants;
import com.banvien.fcv.core.dao.DistributorDAO;
import com.banvien.fcv.core.dao.GenericDAO;
import com.banvien.fcv.core.domain.Distributor;
import com.banvien.fcv.core.domain.User;
import com.banvien.fcv.core.dto.DistributorBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.security.SecurityUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DistributorServiceImpl extends GenericServiceImpl<Distributor,Long> 
                                                    implements DistributorService {

    protected final Log logger = LogFactory.getLog(getClass());

    private DistributorDAO distributorDAO;

    public void setDistributorDAO(DistributorDAO distributorDAO) {
        this.distributorDAO = distributorDAO;
    }

    @Override
	protected GenericDAO<Distributor, Long> getGenericDAO() {
		return distributorDAO;
	}

    @Override
    public Distributor findBySapCode(String sapCode, String name) throws ObjectNotFoundException {
        Distributor res = this.distributorDAO.findBySapCodeAndName(sapCode, name);
        if (res == null) throw new ObjectNotFoundException("Not found distributor with sapCode " + sapCode);
        return res;
    }

    @Override
    public void updateItem(DistributorBean distributorBean) throws ObjectNotFoundException, DuplicateException {
        Distributor dbItem = this.distributorDAO.findByIdNoAutoCommit(distributorBean.getPojo().getDistributorID());
        if (dbItem == null) throw new ObjectNotFoundException("Not found distributor " + distributorBean.getPojo().getDistributorID());

        Distributor pojo = distributorBean.getPojo();
        pojo.setCreatedBy(dbItem.getCreatedBy());
        this.distributorDAO.detach(dbItem);
        this.distributorDAO.update(pojo);
    }

    @Override
    public void addNew(DistributorBean distributorBean) throws DuplicateException {
        Distributor pojo = distributorBean.getPojo();

        User user = new User();
        user.setUserID(SecurityUtils.getLoginUserId());
        pojo.setCreatedBy(user);

        pojo = this.distributorDAO.save(pojo);
        distributorBean.setPojo(pojo);
    }

    @Override
    public Integer deleteItems(String[] checkList) {
        Integer res = 0;
        if (checkList != null && checkList.length > 0) {
            res = checkList.length;
            for (String id : checkList) {
                distributorDAO.delete(Long.parseLong(id));
            }
        }
        return res;
    }

    @Override
    public Object[] search(DistributorBean bean) {
        Map<String, Object> properties = new HashMap<String, Object>();
        if (!SecurityUtils.userHasAuthority(Constants.ADMIN_ROLE)) {
            properties.put("createdBy.userID", SecurityUtils.getLoginUserId());
        }
        if (StringUtils.isNotBlank(bean.getPojo().getSapCode())) {
            properties.put(Distributor.FIELD_SAPCODE, bean.getPojo().getSapCode());
        }

        if (StringUtils.isNotBlank(bean.getPojo().getName())) {
            properties.put(Distributor.FIELD_NAME, bean.getPojo().getName());
        }

        return this.distributorDAO.searchByProperties(properties, bean.getFirstItem(), bean.getMaxPageItems(), bean.getSortExpression(), bean.getSortDirection(), true);
    }

    @Override
    public List<Distributor> findByOnlineAgent() {
        Map<String, Object> properties = new HashMap<String, Object>();
        if (!SecurityUtils.userHasAuthority(Constants.ADMIN_ROLE)) {
            properties.put("createdBy.userID", SecurityUtils.getLoginUserId());
        }
        return this.distributorDAO.findByProperties(properties, "name", Constants.SORT_ASC, true, true);
    }

    @Override
   	public List<Distributor> findAllSortAsc() {
           StringBuffer whereClause = new StringBuffer();
           if (!SecurityUtils.userHasAuthority(Constants.ADMIN_ROLE)) {
               Long userID = SecurityUtils.getLoginUserId();
               whereClause.append("distributorID IN (SELECT distributor.distributorID FROM Userdistributor WHERE user.userID = ").append(userID).append(")");
           }
   		return this.distributorDAO.findByProperties(new HashMap<String, Object>(), "id", Constants.SORT_ASC, true, whereClause.toString());
   	}

}