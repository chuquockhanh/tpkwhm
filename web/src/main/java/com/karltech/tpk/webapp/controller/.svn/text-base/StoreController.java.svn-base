package com.banvien.fcv.webapp.controller;

import com.banvien.fcv.core.Constants;
import com.banvien.fcv.core.domain.*;
import com.banvien.fcv.core.dto.*;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.core.service.*;
import com.banvien.fcv.core.util.CacheUtil;
import com.banvien.fcv.webapp.editor.CustomDateEditor;
import com.banvien.fcv.webapp.editor.PojoEditor;
import com.banvien.fcv.webapp.util.CommonUtil;
import com.banvien.fcv.webapp.util.ExcelUtil;
import com.banvien.fcv.webapp.util.FileUtils;
import com.banvien.fcv.webapp.util.RequestUtil;
import com.banvien.fcv.webapp.validator.StoreValidator;
import jxl.*;
import jxl.read.biff.BiffException;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

/**
 * Created by Ban Vien Ltd.
 * Author: Vien Nguyen (vien.nguyen@banvien.com)
 * Date: 6/16/12
 * Time: 11:59 AM
 */
@Controller
public class StoreController extends ApplicationObjectSupport {
    private transient final Log log = LogFactory.getLog(getClass());

    private static final String STORE_IMPORT_KEY = "STORE_IMPORT_KEY";
    private static final String STORE_IMPORT_BRAND_GROUP_KEY = "STORE_IMPORT_BRAND_GROUP_KEY";
    private static final String STORE_IMPORT_BRAND_KEY = "STORE_IMPORT_BRAND_KEY";
    private static final String STORE_IMPORT_PRODUCT_KEY = "STORE_IMPORT_PRODUCT_KEY";


    private static final int COL_ACCOUNT = 1;
    private static final int COL_STORE_NO = 2;
    private static final int COL_STORE_NAME = 3;

    enum PARSE_PHASE {
        NONE,
        BRAND_GROUP,
        BRAND,
        PRODUCT,
        STORE
    }


    @Autowired
    private StoreService storeService;

    @Autowired
    private StoreValidator storeValidator;

    @Autowired
    private AccountService accountService;

    @Autowired
    private RegionService regionService;

    @Autowired
    private ProductService productService;

    @Autowired
    private BrandgroupService brandgroupService;

    @Autowired
    private ProductbrandService productbrandService;

    @Autowired
    private StoresosmasterService storesosmasterService;



    @InitBinder
    public void initBinder(WebDataBinder binder) {
    	binder.registerCustomEditor(Date.class, new CustomDateEditor());
        binder.registerCustomEditor(Region.class, new PojoEditor(Region.class, "regionID", Long.class));
        binder.registerCustomEditor(Account.class, new PojoEditor(Account.class, "accountID", Long.class));
        binder.registerCustomEditor(Brandgroup.class, new PojoEditor(Brandgroup.class, "brandGroupID", Long.class));
	}
    
    @RequestMapping("/support/store/edit.html")
	public ModelAndView edit(@ModelAttribute(Constants.FORM_MODEL_KEY) StoreBean storeBean, BindingResult bindingResult) {
		ModelAndView mav = new ModelAndView("/support/store/edit");

		String crudaction = storeBean.getCrudaction();
		Store pojo = storeBean.getPojo();
		if(StringUtils.isNotBlank(crudaction) && crudaction.equals("insert-update")) {
			try {
				//validate
				storeValidator.validate(storeBean, bindingResult);

				if(!bindingResult.hasErrors()) {
					if(pojo.getStoreID() != null && pojo.getStoreID() > 0) {
						this.storeService.updateItem(storeBean);
						mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.update.successful"));
					} else {
						this.storeService.addNew(storeBean);
						mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.add.successful"));
					}
					mav.addObject("success", true);

				}
			}catch (ObjectNotFoundException oe) {
				logger.error(oe.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.exception.keynotfound"));
			}catch (DuplicateException de) {
				logger.error(de.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.exception.duplicate"));
			}catch(Exception e) {
				logger.error(e.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("general.exception.msg"));
			}
		}
		if(!bindingResult.hasErrors()&& storeBean.getPojo().getStoreID() != null && storeBean.getPojo().getStoreID() > 0) {
			try {
				Store itemObj = this.storeService.findById(pojo.getStoreID());
				storeBean.setPojo(itemObj);
			}
			catch (Exception e) {
				logger.error("Could not found news " + storeBean.getPojo().getStoreID(), e);
			}
		}
        referenceData(mav);
        loadStoreDataForEdit(mav, storeBean);
		mav.addObject(Constants.FORM_MODEL_KEY, storeBean);
		return mav;
	}

    private void loadStoreDataForEdit(ModelAndView mav, StoreBean storeBean) {
        List<Storesosmaster> storeSOSMasters = new ArrayList<Storesosmaster>();
        List<Brandgroup> brandgroups = brandgroupService.findAll();
        if (storeBean.getPojo().getStoreID() != null && storeBean.getPojo().getStoreID() > 0) {
            storeSOSMasters = storesosmasterService.findByStoreID(storeBean.getPojo().getStoreID());
        }
        if (storeSOSMasters.size() == 0) {
            for (Brandgroup brandgroup : brandgroups) {
                Storesosmaster storesosmaster = new Storesosmaster();
                storesosmaster.setBrandgroup(brandgroup);
                storeSOSMasters.add(storesosmaster);
            }
        }
        storeBean.setStoreSOSMasters(storeSOSMasters);

        List<Product> products = productService.findAll();
        mav.addObject("products", products);

        List<Product> registedProducts = productService.findRegisteredProductByStoreID(storeBean.getPojo().getStoreID());
        if (registedProducts.size() > 0) {
            Long[] registeredProductIds = new Long[registedProducts.size()];
            int i = 0;
            for (Product product : registedProducts) {
                registeredProductIds[i] = product.getProductID();
                i++;
            }
            storeBean.setRegisteredProducts(registeredProductIds);
        }


    }

    private void referenceData(ModelAndView mav) {
        mav.addObject("regions", regionService.findAll());
        mav.addObject("accounts", accountService.findAll());
    }


    @RequestMapping(value={"/support/store/list.html"})
    public ModelAndView list(StoreBean bean, HttpServletRequest request) {
        ModelAndView mav = new ModelAndView("/support/store/list");
		if(StringUtils.isNotBlank(bean.getCrudaction()) && bean.getCrudaction().equals(Constants.ACTION_DELETE)) {
			Integer totalDeleted = 0;
			try {
				totalDeleted = storeService.deleteItems(bean.getCheckList());
				mav.addObject("totalDeleted", totalDeleted);
			}catch (Exception e) {
				log.error(e.getMessage());
				mav.addObject(Constants.MESSAGE_RESPONSE_MODEL_KEY, this.getMessageSourceAccessor().getMessage("database.multipledelete.exception"));
			}
		}
        executeSearch(bean, request);
        referenceData(mav);
        mav.addObject(Constants.LIST_MODEL_KEY, bean);
        return mav;
    }

    @RequestMapping(value={"/support/store/import.html"})
    public ModelAndView importData(StoreImportBean bean, HttpServletRequest request) throws IOException, ServletException {
        ModelAndView mav = new ModelAndView("/support/store/import");
        mav.addObject(Constants.FORM_MODEL_KEY, bean);
        if (RequestMethod.GET.toString().equals(request.getMethod())) {
			//Clear cache
			CacheUtil.getInstance().remove(request.getSession().getId() + STORE_IMPORT_KEY);
            CacheUtil.getInstance().remove(request.getSession().getId() + STORE_IMPORT_BRAND_GROUP_KEY);
            CacheUtil.getInstance().remove(request.getSession().getId() + STORE_IMPORT_BRAND_KEY);
            CacheUtil.getInstance().remove(request.getSession().getId() + STORE_IMPORT_PRODUCT_KEY);
		} else if (RequestMethod.POST.toString().equals(request.getMethod())) {
            try{
                if(StringUtils.isNotBlank(bean.getCrudaction()) && bean.getCrudaction().equals(Constants.ACTION_IMPORT)) {
                    String destFolder = CommonUtil.getBaseFolder() + CommonUtil.getTempFolderName();
                    MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;
                    Map<String, MultipartFile> map = mRequest.getFileMap();
                    MultipartFile csvfile = (MultipartFile) map.get("dataFile");
                    String fileName = FileUtils.upload(mRequest, destFolder, csvfile);
                    String destFileName = request.getSession().getServletContext().getRealPath(destFolder + "/" + fileName);

                    List<StoreImportDTO> importedStores = new ArrayList<StoreImportDTO>();
                    List<ProductImportDTO> productImportDTOs = new ArrayList<ProductImportDTO>();
                    List<BrandGroupImportDTO> brandGroupImportDTOs = new ArrayList<BrandGroupImportDTO>();
                    List<BrandImportDTO> brandImportDTOs = new ArrayList<BrandImportDTO>();
                    extractExcelData2Stores(destFileName, importedStores, productImportDTOs, brandGroupImportDTOs, brandImportDTOs);

                    log.debug("Remove temp file: " + destFileName);
                    try{
                        FileUtils.remove(destFileName);
                    }catch (Exception e) {
                        log.debug("Temporary File could not be deleted" + e.getMessage());
                    }
                    String sessionId = request.getSession().getId();
                    CacheUtil.getInstance().putValue(sessionId + STORE_IMPORT_KEY, importedStores);
                    CacheUtil.getInstance().putValue(sessionId + STORE_IMPORT_PRODUCT_KEY, productImportDTOs);
                    CacheUtil.getInstance().putValue(sessionId + STORE_IMPORT_BRAND_GROUP_KEY, brandGroupImportDTOs);
                    CacheUtil.getInstance().putValue(sessionId + STORE_IMPORT_BRAND_KEY, brandImportDTOs);

                }
                mav = new ModelAndView("redirect:/support/store/importlist.html");
            }catch (BiffException ex) {
                mav = new ModelAndView("/support/store/import");
                mav.addObject("regions", regionService.findAll());
                mav.addObject(Constants.FORM_MODEL_KEY, bean);
                mav.addObject("messageResponse", "Could not extract excel data");
            }
        }

        return mav;
    }

    private void extractExcelData2Stores(String dbFileName, List<StoreImportDTO> importedStores, List<ProductImportDTO> productImportDTOs,
                                         List<BrandGroupImportDTO> brandGroupImportDTOs, List<BrandImportDTO> brandImportDTOs) throws BiffException, IOException {
        WorkbookSettings ws = null;
		Workbook workbook = null;
		Sheet s = null;
		Cell rowData[] = null;
		int rowCount = 0;
		int columnCount = 0;
		DateCell dc = null;
		int totalSheet = 0;
        FileInputStream fs = new FileInputStream(new File(dbFileName));
        ws = new WorkbookSettings();
        ExcelUtil.setEncoding4Workbook(ws);
//        ws.setLocale(new Locale("en", "EN"));
        workbook = Workbook.getWorkbook(fs, ws);

        s = workbook.getSheet(0);
        rowCount = s.getRows();
        PARSE_PHASE parse_phase = PARSE_PHASE.NONE;

        for (int i = 0; i < rowCount; i++) {
            rowData = s.getRow(i);
            if (rowData.length == 0) {
                continue;
            }
            //Process for brand group
            if (parse_phase == PARSE_PHASE.NONE) {
                for (int j = 0; j < rowData.length; j++) {
                    if (StringUtils.isNotBlank(rowData[j].getContents())) {
                        BrandGroupImportDTO brandGroupImportDTO = new BrandGroupImportDTO();
                        brandGroupImportDTO.setBrandGroup(rowData[j].getContents());
                        brandGroupImportDTO.setStartColumn(rowData[j].getColumn());
                        brandGroupImportDTOs.add(brandGroupImportDTO);
                    }
                }
                parse_phase = PARSE_PHASE.BRAND;
            }else if (parse_phase == PARSE_PHASE.BRAND) {
                for (int j = 0; j < rowData.length; j++) {
                    if (StringUtils.isNotBlank(rowData[j].getContents())) {
                        BrandImportDTO brandImportDTO = new BrandImportDTO();
                        brandImportDTO.setBrand(rowData[j].getContents());
                        brandImportDTO.setStartColumn(rowData[j].getColumn());

                        //Get brand group
                        BrandGroupImportDTO brandGroupImportDTO = brandGroupImportDTOs.get(0);
                        for (BrandGroupImportDTO temp : brandGroupImportDTOs) {
                            if (temp.getStartColumn() <= brandImportDTO.getStartColumn()) {
                                brandGroupImportDTO = temp;
                            }else{
                                break;
                            }
                        }

                        brandImportDTO.setBrandGroupImportDTO(brandGroupImportDTO);
                        brandImportDTOs.add(brandImportDTO);
                    }
                }
                parse_phase = PARSE_PHASE.PRODUCT;
            }

            //Identify column header
            if (rowData[0].getContents().equals("STT")) {
                for (int j = 4; j < rowData.length; j++) {
                    if (StringUtils.isNotBlank(rowData[j].getContents())) {
                        ProductImportDTO productImportDTO = new ProductImportDTO();
                        productImportDTO.setName(CommonUtil.cleanHtmlTags(rowData[j].getContents()));

                        int col = rowData[j].getColumn();
                        //Get brand
                        BrandImportDTO brandImportDTO = brandImportDTOs.get(0);
                        for (BrandImportDTO temp : brandImportDTOs) {
                            if (temp.getStartColumn() <= col) {
                                brandImportDTO = temp;
                            }else{
                                break;
                            }
                        }
                        productImportDTO.setBrandGroupImportDTO(brandImportDTO.getBrandGroupImportDTO());
                        productImportDTO.setBrandImportDTO(brandImportDTO);
                        productImportDTOs.add(productImportDTO);
                    }
                }

                parse_phase = PARSE_PHASE.STORE;
            }else if (parse_phase == PARSE_PHASE.STORE) {
                if (StringUtils.isNotBlank(rowData[COL_STORE_NO].getContents()) && StringUtils.isNotBlank(rowData[COL_ACCOUNT].getContents())) {
                    StoreImportDTO storeImportDTO = new StoreImportDTO();

                    storeImportDTO.setAccount(rowData[COL_ACCOUNT].getContents());
                    storeImportDTO.setStoreName(rowData[COL_STORE_NAME].getContents());
                    storeImportDTO.setStoreNo(rowData[COL_STORE_NO].getContents());

                    List<ProductImportDTO> registeredProducts = new ArrayList<ProductImportDTO>();
                    for (int j = 4; j < rowData.length; j++) {
                        String reg = rowData[j].getContents();
                        if (StringUtils.isNotBlank(reg)) {
                            registeredProducts.add(productImportDTOs.get(j - 4));
                        }
                    }

                    storeImportDTO.setRegisteredProduct(registeredProducts);

                    importedStores.add(storeImportDTO);
                }
            }
        }
    }

    @RequestMapping(value="/support/store/importlist.html", method=RequestMethod.GET)
    public ModelAndView importStoreList(HttpServletRequest request, StoreImportBean bean) throws Exception {
		String sessionId = request.getSession().getId();
		List<StoreImportDTO> importedStores = (List<StoreImportDTO>) CacheUtil.getInstance().getValue(sessionId + STORE_IMPORT_KEY);

		if (importedStores == null || importedStores.size() == 0) {
			return new ModelAndView("redirect:/support/store/import.html");
		}

		List<StoreImportDTO> displayStores = importedStores;

		RequestUtil.initSearchBean(request, bean);
        if (displayStores.size() > 0) {
	        Integer lastIndex = bean.getPage() * bean.getMaxPageItems();
	        if (lastIndex > displayStores.size()) {
	        	lastIndex = displayStores.size();
	        }
	        if (bean.getFirstItem() > displayStores.size()) {
	        	bean.setFirstItem(0);
	        }

        	bean.setListResult((List<StoreImportDTO>) displayStores.subList(bean.getFirstItem(), lastIndex));
        }
        bean.setTotalItems(displayStores.size());

		return new ModelAndView("/support/store/importList", Constants.LIST_MODEL_KEY, bean);
	}
    
    @RequestMapping(value="/support/store/importsave.html", method=RequestMethod.GET)
    public ModelAndView importStoreSave(HttpServletRequest request, StoreImportBean bean) throws Exception {
		String sessionId = request.getSession().getId();
		List<StoreImportDTO> importedStores = (List<StoreImportDTO>) CacheUtil.getInstance().getValue(sessionId + STORE_IMPORT_KEY);
        List<BrandGroupImportDTO> brandGroupImportDTOs = (List<BrandGroupImportDTO>)CacheUtil.getInstance().getValue(sessionId + STORE_IMPORT_BRAND_GROUP_KEY);
        List<BrandImportDTO> brandImportDTOs = (List<BrandImportDTO>)CacheUtil.getInstance().getValue(sessionId + STORE_IMPORT_BRAND_KEY);
        List<ProductImportDTO> productImportDTOs = (List<ProductImportDTO>)CacheUtil.getInstance().getValue(sessionId + STORE_IMPORT_PRODUCT_KEY);
		if (importedStores == null || importedStores.size() == 0) {
			return new ModelAndView("redirect:/support/store/import.html");
		}
		
		/**
		 * Save/update stores
		 */
		int totalSuccess = 0;

        //Save brand group
        Map<String, Brandgroup> brandGroupMap = brandgroupService.importBrandGroup(brandGroupImportDTOs);

        for(BrandImportDTO brandImportDTO : brandImportDTOs) {
            brandImportDTO.setBrandgroup(brandGroupMap.get(brandImportDTO.getBrandGroupImportDTO().getBrandGroup()));
        }

        Map<String, Productbrand> productbrandMap = productbrandService.importProductBrand(brandImportDTOs);

        for (ProductImportDTO productImportDTO : productImportDTOs) {
            productImportDTO.setProductbrand(productbrandMap.get(productImportDTO.getBrandImportDTO().getBrand()));
        }
        Map<String, Product> productMap = productService.importProducts(productImportDTOs);

		for (StoreImportDTO storeImport : importedStores) {
            try{
                List<Product> registeredProduct = new ArrayList<Product>();
                for (ProductImportDTO productImportDTO : storeImport.getRegisteredProduct()) {
                    Product product = productMap.get(productImportDTO.getName() + "|" + productImportDTO.getProductbrand().getName());
                    if (product != null) {
                        registeredProduct.add(product);
                    }
                }
                storeService.importStore(storeImport, registeredProduct);
                totalSuccess++;
            }catch (Exception ex) {

            }

		}
	
		CacheUtil.getInstance().remove(sessionId + STORE_IMPORT_KEY);
        CacheUtil.getInstance().remove(sessionId + STORE_IMPORT_BRAND_GROUP_KEY);
        CacheUtil.getInstance().remove(sessionId + STORE_IMPORT_BRAND_KEY);
        CacheUtil.getInstance().remove(sessionId + STORE_IMPORT_PRODUCT_KEY);



		ModelAndView mav = new ModelAndView("/support/store/importReport");
		mav.addObject("success", true);
		mav.addObject("totalItems", importedStores.size());
		mav.addObject("totalSuccess", Integer.valueOf(totalSuccess));

		return mav;
	}

    private void executeSearch(StoreBean bean, HttpServletRequest request) {
        RequestUtil.initSearchBean(request, bean);

        Object[] results = this.storeService.search(bean);
        bean.setListResult((List<Store>)results[1]);
        bean.setTotalItems(Integer.valueOf(results[0].toString()));
    }
}
