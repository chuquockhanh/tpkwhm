package com.banvien.fcv.webapp.validator;

import com.banvien.fcv.core.domain.Distributor;
import com.banvien.fcv.core.dto.DistributorBean;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.core.service.DistributorService;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

/**
 * This object is responsible for validating user input parameters from add/edit distributor form
 * @author Vien Nguyen
 *
 */
@Component
public class DistributorValidator extends ApplicationObjectSupport implements Validator {
	private transient final Log log = LogFactory.getLog(DistributorValidator.class);

    private DistributorService distributorService;
    @Autowired
    public void setDistributorService(DistributorService distributorService) {
        this.distributorService = distributorService;
    }

    public boolean supports(Class<?> aClass) {
        return DistributorBean.class.isAssignableFrom(aClass);
    }
    /**
     * This method is called for validating Model Attribute
     */
    public void validate(Object o, Errors errors) {
        DistributorBean cmd = (DistributorBean)o;
        trimingField(cmd);
        validateRequiredValues(cmd, errors);
        validateDuplicate(cmd, errors);
    }

    private void validateRequiredValues(DistributorBean cmd, Errors errors) {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "pojo.sapCode", "errors.required", new String[] {this.getMessageSourceAccessor().getMessage("support.distributor.form.sapCode")}, "non-empty value required.");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "pojo.name", "errors.required", new String[] {this.getMessageSourceAccessor().getMessage("support.distributor.form.name")}, "non-empty value required.");
    }

    private void trimingField(DistributorBean cmd) {
        if(StringUtils.isNotEmpty(cmd.getPojo().getSapCode())) {
    		cmd.getPojo().setSapCode(cmd.getPojo().getSapCode().trim());
    	}
    	if(StringUtils.isNotEmpty(cmd.getPojo().getName())) {
    		cmd.getPojo().setName(cmd.getPojo().getName().trim());
    	}

    }

    private void validateDuplicate(DistributorBean cmd, Errors errors) {
    	//SapCode
    	if(StringUtils.isNotBlank(cmd.getPojo().getSapCode()) && StringUtils.isNotBlank(cmd.getPojo().getName())) {
    		try {
    			Distributor distributor = this.distributorService.findBySapCode(cmd.getPojo().getSapCode(), cmd.getPojo().getName());
                if(distributor != null) {
                    if(cmd.getPojo().getDistributorID() != null &&
                            !distributor.getDistributorID().equals(cmd.getPojo().getDistributorID()))
                    errors.rejectValue("pojo.sapCode", "error.duplicated", new String[] {this.getMessageSourceAccessor().getMessage("support.distributor.form.code")}, "Value has been chosen.");
                }
    		} catch (ObjectNotFoundException ex) {
    			// true
    		}
    	}

    }


}
