package com.banvien.fcv.webapp.controller;

import java.sql.Timestamp;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.banvien.fcv.core.Constants;
import com.banvien.fcv.core.domain.Outletbrand;
import com.banvien.fcv.core.domain.Promotion;
import com.banvien.fcv.core.domain.Promotionproduct;
import com.banvien.fcv.core.domain.Promotiontype;
import com.banvien.fcv.core.domain.Region;
import com.banvien.fcv.core.domain.Unit;
import com.banvien.fcv.core.dto.PromotionBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.core.service.OutletbrandService;
import com.banvien.fcv.core.service.PromotionService;
import com.banvien.fcv.core.service.PromotionproductService;
import com.banvien.fcv.core.service.PromotiontypeService;
import com.banvien.fcv.core.service.RegionService;
import com.banvien.fcv.core.service.UnitService;
import com.banvien.fcv.webapp.editor.CustomDateEditor;
import com.banvien.fcv.webapp.editor.PojoEditor;
import com.banvien.fcv.webapp.util.RequestUtil;
import com.banvien.fcv.webapp.validator.PromotionValidator;

/**
 * Created by Ban Vien Ltd.
 * Author: Vien Nguyen (vien.nguyen@banvien.com)
 * Date: 6/16/12
 * Time: 11:59 AM
 */
@Controller
public class PromotionController extends ApplicationObjectSupport {
    private transient final Log log = LogFactory.getLog(getClass());

    @Autowired
    private PromotionService promotionService;

    @Autowired
    private PromotiontypeService promotiontypeService;

    @Autowired
    private RegionService regionService;
    
    @Autowired
    private UnitService unitService;

    @Autowired
    private PromotionproductService promotionproductService;

    @Autowired
    private PromotionValidator promotionValidator;

    @Autowired
    private OutletbrandService outletbrandService;

    @InitBinder
    public void initBinder(WebDataBinder binder) {
    	binder.registerCustomEditor(Timestamp.class, new CustomDateEditor("dd/MM/yyyy"));
        binder.registerCustomEditor(Promotiontype.class, new PojoEditor(Promotiontype.class, "promotionTypeID", Long.class));
        binder.registerCustomEditor(Promotionproduct.class, new PojoEditor(Promotionproduct.class, "promotionProductID", Long.class));
        binder.registerCustomEditor(Promotiontype.class, new PojoEditor(Promotiontype.class, "promotionTypeID", Long.class));
        binder.registerCustomEditor(Unit.class, new PojoEditor(Unit.class, "unitID", Long.class));
        binder.registerCustomEditor(Outletbrand.class, new PojoEditor(Outletbrand.class, "outletBrandID", Long.class));

	}
    
    @RequestMapping("/support/promotion/edit.html")
	public ModelAndView edit(@ModelAttribute(Constants.FORM_MODEL_KEY) PromotionBean promotionBean, BindingResult bindingResult) {
		ModelAndView mav = new ModelAndView("/support/promotion/edit");

		String crudaction = promotionBean.getCrudaction();
		Promotion pojo = promotionBean.getPojo();
		if(StringUtils.isNotBlank(crudaction) && crudaction.equals("insert-update")) {
			try {
				//validate
				promotionValidator.validate(promotionBean, bindingResult);

				if(!bindingResult.hasErrors()) {
					if(pojo.getPromotionID() != null && pojo.getPromotionID() > 0) {
						this.promotionService.updateItem(promotionBean);
						mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.update.successful"));
					} else {
						this.promotionService.addNew(promotionBean);
						mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.add.successful"));
					}
					mav.addObject("success", true);

				}
			}catch (ObjectNotFoundException oe) {
				logger.error(oe.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.exception.keynotfound"));
			}catch (DuplicateException de) {
				logger.error(de.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.exception.duplicate"));
			}catch(Exception e) {
				logger.error(e.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("general.exception.msg"));
			}
		}
		if(!bindingResult.hasErrors()&& promotionBean.getPojo().getPromotionID() != null && promotionBean.getPojo().getPromotionID() > 0) {
			try {
				Promotion itemObj = this.promotionService.findById(pojo.getPromotionID());
				promotionBean.setPojo(itemObj);
                if (itemObj.getScopes() != null && itemObj.getScopes().size() > 0 && (promotionBean.getScopes() == null || promotionBean.getScopes().length == 0)) {
                    Long[] scopes = new Long[itemObj.getScopes().size()];
                    int i = 0;
                    for (Region region : itemObj.getScopes()) {
                        scopes[i] = region.getRegionID();
                        i++;
                    }
                    promotionBean.setScopes(scopes);
                }

                if (itemObj.getProductsToHandheld() != null && itemObj.getProductsToHandheld().size() > 0 && (promotionBean.getProductsToHandheld() == null || promotionBean.getProductsToHandheld().length == 0)) {
                    Long[] productsToHandheld = new Long[itemObj.getProductsToHandheld().size()];
                    int i = 0;
                    for (Promotionproduct product : itemObj.getProductsToHandheld()) {
                        productsToHandheld[i] = product.getPromotionProductID();
                        i++;
                    }
                    promotionBean.setProductsToHandheld(productsToHandheld);
                }
			}
			catch (Exception e) {
				logger.error("Could not found news " + promotionBean.getPojo().getPromotionID(), e);
			}
		}

		mav.addObject(Constants.FORM_MODEL_KEY, promotionBean);
        referenceData(mav);
		return mav;
	}

    private void referenceData(ModelAndView mav) {
        mav.addObject("products", promotionproductService.findAll());
        mav.addObject("promotionTypes", promotiontypeService.findAll());
        mav.addObject("regions", regionService.findAll());
        mav.addObject("units", unitService.findAll());
        mav.addObject("outletBrands", outletbrandService.findAll());
    }


    @RequestMapping(value={"/support/promotion/list.html"})
    public ModelAndView list(PromotionBean bean, HttpServletRequest request) {
        ModelAndView mav = new ModelAndView("/support/promotion/list");
		if(StringUtils.isNotBlank(bean.getCrudaction()) && bean.getCrudaction().equals(Constants.ACTION_DELETE)) {
			Integer totalDeleted = 0;
			try {
				totalDeleted = promotionService.deleteItems(bean.getCheckList());
				mav.addObject("totalDeleted", totalDeleted);
			}catch (Exception e) {
				log.error(e.getMessage());
				mav.addObject(Constants.MESSAGE_RESPONSE_MODEL_KEY, this.getMessageSourceAccessor().getMessage("database.multipledelete.exception"));
			}
		}
        executeSearch(bean, request);
        referenceData(mav);
        mav.addObject(Constants.LIST_MODEL_KEY, bean);
        return mav;
    }

    private void executeSearch(PromotionBean bean, HttpServletRequest request) {
        RequestUtil.initSearchBean(request, bean);

        Object[] results = this.promotionService.search(bean);
        bean.setListResult((List<Promotion>)results[1]);
        bean.setTotalItems(Integer.valueOf(results[0].toString()));
    }
}
