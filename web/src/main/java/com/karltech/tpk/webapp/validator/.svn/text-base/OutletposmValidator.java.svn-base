package com.banvien.fcv.webapp.validator;

import com.banvien.fcv.core.domain.Outletposm;
import com.banvien.fcv.core.dto.OutletPOSMBean;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.core.service.OutletposmService;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

/**
 * This object is responsible for validating user input parameters from add/edit outletposm form
 * @author Vien Nguyen
 *
 */
@Component
public class OutletposmValidator extends ApplicationObjectSupport implements Validator {
	private transient final Log log = LogFactory.getLog(OutletposmValidator.class);

    private OutletposmService ouletposmService;
    
	@Autowired
    public void setOutletposmService(OutletposmService ouletposmService) {
		this.ouletposmService = ouletposmService;
	}
    
    public boolean supports(Class<?> aClass) {
        return OutletPOSMBean.class.isAssignableFrom(aClass);
    }
    /**
     * This method is called for validating Model Attribute
     */
    public void validate(Object o, Errors errors) {
        OutletPOSMBean cmd = (OutletPOSMBean)o;
        trimingField(cmd);
        validateRequiredValues(cmd, errors);
        validateDuplicate(cmd, errors);
    }

    private void validateRequiredValues(OutletPOSMBean cmd, Errors errors) {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "pojo.code", "errors.required", new String[] {this.getMessageSourceAccessor().getMessage("support.ouletposm.form.code")}, "non-empty value required.");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "pojo.name", "errors.required", new String[] {this.getMessageSourceAccessor().getMessage("support.ouletposm.form.name")}, "non-empty value required.");
    }

    private void trimingField(OutletPOSMBean cmd) {
        if(StringUtils.isNotEmpty(cmd.getPojo().getCode())) {
    		cmd.getPojo().setCode(cmd.getPojo().getCode().trim());
    	}
    	if(StringUtils.isNotEmpty(cmd.getPojo().getName())) {
    		cmd.getPojo().setName(cmd.getPojo().getName().trim());
    	}

    }


    private void validateDuplicate(OutletPOSMBean cmd, Errors errors) {
    	//Code
    	if(StringUtils.isNotBlank(cmd.getPojo().getCode())) {
    		try {
    			Outletposm user = this.ouletposmService.findByCode(cmd.getPojo().getCode());
                if(user != null) {
                    if(cmd.getPojo().getOutletPOSMID() != null &&
                            !user.getOutletPOSMID().equals(cmd.getPojo().getOutletPOSMID()))
                    errors.rejectValue("pojo.code", "error.duplicated", new String[] {this.getMessageSourceAccessor().getMessage("support.ouletposm.form.code")}, "Value has been chosen.");
                }
    		} catch (ObjectNotFoundException ex) {
    			// true
    		}
    	}

    }

}
