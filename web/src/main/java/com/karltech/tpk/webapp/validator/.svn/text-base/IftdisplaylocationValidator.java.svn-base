package com.banvien.fcv.webapp.validator;

import com.banvien.fcv.core.domain.Iftdisplaylocation;
import com.banvien.fcv.core.dto.IFTDisplayLocationBean;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.core.service.IftdisplaylocationService;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

/**
 * This object is responsible for validating user input parameters from add/edit powersku form
 * @author Vien Nguyen
 *
 */
@Component
public class IftdisplaylocationValidator extends ApplicationObjectSupport implements Validator {
	private transient final Log log = LogFactory.getLog(IftdisplaylocationValidator.class);

    private IftdisplaylocationService iftdisplaylocationService;
    
	@Autowired
    public void setIftdisplaylocationService(IftdisplaylocationService iftdisplaylocationService) {
		this.iftdisplaylocationService = iftdisplaylocationService;
	}
    
    public boolean supports(Class<?> aClass) {
        return IFTDisplayLocationBean.class.isAssignableFrom(aClass);
    }
    /**
     * This method is called for validating Model Attribute
     */
    public void validate(Object o, Errors errors) {
        IFTDisplayLocationBean cmd = (IFTDisplayLocationBean)o;
        trimingField(cmd);
        validateRequiredValues(cmd, errors);
        validateDuplicate(cmd, errors);
    }

    private void validateRequiredValues(IFTDisplayLocationBean cmd, Errors errors) {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "pojo.code", "errors.required", new String[] {this.getMessageSourceAccessor().getMessage("support.iftdisplaylocation.form.code")}, "non-empty value required.");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "pojo.name", "errors.required", new String[] {this.getMessageSourceAccessor().getMessage("support.iftdisplaylocation.form.name")}, "non-empty value required.");
    }

    private void trimingField(IFTDisplayLocationBean cmd) {
        if(StringUtils.isNotEmpty(cmd.getPojo().getCode())) {
    		cmd.getPojo().setCode(cmd.getPojo().getCode().trim());
    	}
    	if(StringUtils.isNotEmpty(cmd.getPojo().getName())) {
    		cmd.getPojo().setName(cmd.getPojo().getName().trim());
    	}

    }


    private void validateDuplicate(IFTDisplayLocationBean cmd, Errors errors) {
    	//Code
    	if(StringUtils.isNotBlank(cmd.getPojo().getCode())) {
    		try {
    			Iftdisplaylocation iftdisplaylocation = this.iftdisplaylocationService.findByCode(cmd.getPojo().getCode());
                if(iftdisplaylocation != null) {
                    if(cmd.getPojo().getIftDisplayLocationID() != null &&
                            !iftdisplaylocation.getIftDisplayLocationID().equals(cmd.getPojo().getIftDisplayLocationID()))
                    errors.rejectValue("pojo.code", "error.duplicated", new String[] {this.getMessageSourceAccessor().getMessage("support.iftdisplaylocation.form.code")}, "Value has been chosen.");
                }
    		} catch (ObjectNotFoundException ex) {
    			// true
    		}
    	}

    }

}
