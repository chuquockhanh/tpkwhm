package com.banvien.fcv.webapp.controller;

import com.banvien.fcv.core.Constants;
import com.banvien.fcv.core.domain.*;
import com.banvien.fcv.core.dto.OutletSalemanBean;
import com.banvien.fcv.core.dto.SalemanBean;
import com.banvien.fcv.core.dto.SalemanImportBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.core.service.OutletSalemanService;
import com.banvien.fcv.core.service.OutletbrandService;
import com.banvien.fcv.core.service.OutletbrandgroupService;
import com.banvien.fcv.core.service.SalemanService;
import com.banvien.fcv.core.util.CacheUtil;
import com.banvien.fcv.webapp.dto.CellDataType;
import com.banvien.fcv.webapp.dto.CellValue;
import com.banvien.fcv.webapp.editor.CustomDateEditor;
import com.banvien.fcv.webapp.editor.PojoEditor;
import com.banvien.fcv.webapp.util.CommonUtil;
import com.banvien.fcv.webapp.util.ExcelUtil;
import com.banvien.fcv.webapp.util.FileUtils;
import com.banvien.fcv.webapp.util.RequestUtil;
import com.banvien.fcv.webapp.validator.SalemanValidator;
import jxl.*;
import jxl.format.Colour;
import jxl.read.biff.BiffException;
import jxl.write.*;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

/**
 * Created by Ban Vien Ltd.
 * Author: Vien Nguyen (vien.nguyen@banvien.com)
 * Date: 6/16/12
 * Time: 11:59 AM
 */
@Controller
public class SalemanController extends ApplicationObjectSupport {
    private transient final Log log = LogFactory.getLog(getClass());

    private static final int COL_CODE = 1;
    private static final int COL_NAME = 2;
    private static final int COL_TYPE = 3;
    private static final int COL_EMAIL = 4;
    private static final int COL_TELEPHONE = 5;
    private static final int COL_MANAGER = 6;

    private static final String SALEMAN_IMPORT_KEY = "SalemanImportKey";


    @Autowired
    private SalemanService salemanService;

    @Autowired
    private OutletSalemanService outletSalemanService;

    @Autowired
    private OutletbrandService outletbrandService;

    @Autowired
    private OutletbrandgroupService outletBrandGroupService;

    @Autowired
    private SalemanValidator salemanValidator;


    @InitBinder
    public void initBinder(WebDataBinder binder) {
    	binder.registerCustomEditor(Date.class, new CustomDateEditor());
        binder.registerCustomEditor(Saleman.class, new PojoEditor(Saleman.class, "salemanID", Long.class));
	}
    
    @RequestMapping("/admin/saleman/edit.html")
	public ModelAndView edit(@ModelAttribute(Constants.FORM_MODEL_KEY) SalemanBean salemanBean, BindingResult bindingResult) {
		ModelAndView mav = new ModelAndView("/support/saleman/edit");

		String crudaction = salemanBean.getCrudaction();
		Saleman pojo = salemanBean.getPojo();
        List<Outletbrand> listOutletBrand = outletbrandService.findAll();
		if(StringUtils.isNotBlank(crudaction) && crudaction.equals("insert-update")) {
			try {
				//validate
				salemanValidator.validate(salemanBean, bindingResult);

				if(!bindingResult.hasErrors()) {
					if(pojo.getSalemanID() != null && pojo.getSalemanID() > 0) {
						this.salemanService.updateItem(salemanBean);
						mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.update.successful"));
					} else {
						this.salemanService.addNew(salemanBean);
						mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.add.successful"));
					}
					mav.addObject("success", true);

				}
			}catch (ObjectNotFoundException oe) {
				logger.error(oe.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.exception.keynotfound"));
			}catch (DuplicateException de) {
				logger.error(de.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.exception.duplicate"));
			}catch(Exception e) {
				logger.error(e.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("general.exception.msg"));
			}
		}
		if(!bindingResult.hasErrors()&& salemanBean.getPojo().getSalemanID() != null && salemanBean.getPojo().getSalemanID() > 0) {
			try {
				Saleman itemObj = this.salemanService.findById(pojo.getSalemanID());


                OutletSalemanBean outletSalemanBean = new OutletSalemanBean();
                outletSalemanBean.setPojo(new OutletSaleman());
                outletSalemanBean.getPojo().setSaleman(new Saleman());
                outletSalemanBean.getPojo().getSaleman().setSalemanID(itemObj.getSalemanID());
                Object[] resultsOutletSaleman = this.outletSalemanService.search(outletSalemanBean);
                outletSalemanBean.setListResult(editData((List<OutletSaleman>) resultsOutletSaleman[1]));
                outletSalemanBean.setTotalItems(editData((List<OutletSaleman>) resultsOutletSaleman[1]).size());


                salemanBean.setOutletSalemanBean(outletSalemanBean);
				salemanBean.setPojo(itemObj);
			}
			catch (Exception e) {
				logger.error("Could not found news " + salemanBean.getPojo().getSalemanID(), e);
			}
		}

		mav.addObject(Constants.FORM_MODEL_KEY, salemanBean);
        referenceData(mav);
		return mav;
	}


    @RequestMapping(value={"/admin/saleman/list.html"})
    public ModelAndView list(SalemanBean bean, HttpServletRequest request, HttpServletResponse response) {
        ModelAndView mav = new ModelAndView("/support/saleman/list");
		if(StringUtils.isNotBlank(bean.getCrudaction()) && bean.getCrudaction().equals(Constants.ACTION_DELETE)) {
			Integer totalDeleted = 0;
			try {
				totalDeleted = salemanService.deleteItems(bean.getCheckList());
				mav.addObject("totalDeleted", totalDeleted);
			}catch (Exception e) {
				log.error(e.getMessage());
				mav.addObject(Constants.MESSAGE_RESPONSE_MODEL_KEY, this.getMessageSourceAccessor().getMessage("database.multipledelete.exception"));
			}
		}
        if(StringUtils.isNotBlank(bean.getCrudaction()) && bean.getCrudaction().equals(Constants.ACTION_EXPORT)) {
      			try {
                      bean.setMaxPageItems(-1);
                      executeSearch(bean, request);
                      ExportSalemanData(bean, request, response);
      			}catch (Exception e) {
      				log.error(e.getMessage());
      				mav.addObject(Constants.MESSAGE_RESPONSE_MODEL_KEY, this.getMessageSourceAccessor().getMessage("database.multipledelete.exception"));
      			}
      		}
        executeSearch(bean, request);
        mav.addObject(Constants.LIST_MODEL_KEY, bean);
        return mav;
    }

    private void executeSearch(SalemanBean bean, HttpServletRequest request) {
        RequestUtil.initSearchBean(request, bean);

        Object[] results = this.salemanService.search(bean);
        bean.setListResult((List<Saleman>)results[1]);
        bean.setTotalItems(Integer.valueOf(results[0].toString()));

    }


    @RequestMapping(value={"/admin/saleman/import.html"})
    public ModelAndView importData(SalemanImportBean bean, HttpServletRequest request) throws IOException, ServletException {
        ModelAndView mav = new ModelAndView("/support/saleman/import");
        mav.addObject(Constants.FORM_MODEL_KEY, bean);
        if (RequestMethod.GET.toString().equals(request.getMethod())) {
			//Clear cache
			CacheUtil.getInstance().remove(request.getSession().getId() + SALEMAN_IMPORT_KEY);
		} else if (RequestMethod.POST.toString().equals(request.getMethod())) {
            try{
                if(StringUtils.isNotBlank(bean.getCrudaction()) && bean.getCrudaction().equals(Constants.ACTION_IMPORT)) {
                    String destFolder = CommonUtil.getBaseFolder() + CommonUtil.getTempFolderName();
                    MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;
                    Map<String, MultipartFile> map = mRequest.getFileMap();
                    MultipartFile csvfile = (MultipartFile) map.get("dataFile");
                    String fileName = FileUtils.upload(mRequest, destFolder, csvfile);
                    String destFileName = request.getSession().getServletContext().getRealPath(destFolder + "/" + fileName);

                    List<Saleman> importedSaleman = new ArrayList<Saleman>();
                    extractExcelData2Outlets(destFileName, importedSaleman, 0);

                    log.debug("Remove temp file: " + destFileName);
                    try{
                        FileUtils.remove(destFileName);
                    }catch (Exception e) {
                        log.debug("Temporary File could not be deleted" + e.getMessage());
                    }
                    String sessionId = request.getSession().getId();
                    CacheUtil.getInstance().putValue(sessionId + SALEMAN_IMPORT_KEY, importedSaleman);
                }
                mav = new ModelAndView("redirect:/support/saleman/importlist.html");
            }catch (Exception ex) {
                mav = new ModelAndView("/support/saleman/import");
                mav.addObject(Constants.FORM_MODEL_KEY, bean);
                mav.addObject("messageResponse", "Could not extract excel data");
            }
        }

        return mav;
    }


    @RequestMapping(value="/support/saleman/importlist.html", method=RequestMethod.GET)
    public ModelAndView importOutletList(HttpServletRequest request, SalemanImportBean bean) throws Exception {
		String sessionId = request.getSession().getId();
		List<Saleman> importedSaleman = (List<Saleman>) CacheUtil.getInstance().getValue(sessionId + SALEMAN_IMPORT_KEY);
		if (importedSaleman == null || importedSaleman.size() == 0) {
			return new ModelAndView("redirect:/support/saleman/import.html");
		}

		List<Saleman> displaySalemans = importedSaleman;

		RequestUtil.initSearchBean(request, bean);
        if (displaySalemans.size() > 0) {
	        Integer lastIndex = bean.getPage() * bean.getMaxPageItems();
	        if (lastIndex > displaySalemans.size()) {
	        	lastIndex = displaySalemans.size();
	        }
	        if (bean.getFirstItem() > displaySalemans.size()) {
	        	bean.setFirstItem(0);
	        }

        	bean.setListResult((List<Saleman>) displaySalemans.subList(bean.getFirstItem(), lastIndex));
        }
        bean.setTotalItems(displaySalemans.size());

		return new ModelAndView("/support/saleman/importList", Constants.LIST_MODEL_KEY, bean);
	}




    @RequestMapping(value="/admin/saleman/importsave.html", method=RequestMethod.GET)
    public ModelAndView importOutletSave(HttpServletRequest request, SalemanImportBean bean) throws Exception {
		String sessionId = request.getSession().getId();
		List<Saleman> importedSalemans = (List<Saleman>) CacheUtil.getInstance().getValue(sessionId + SALEMAN_IMPORT_KEY);
		if (importedSalemans == null || importedSalemans.size() == 0) {
			return new ModelAndView("redirect:/support/saleman/import.html");
		}

		/**
		 * Save/update saleman
		 */
		int totalSuccess = 0;
        List<Long> salemanIDs = new ArrayList<Long>();
		for (Saleman saleman : importedSalemans) {
            try{
                if(saleman.getValidate().equals("Success"))
                {
                    Long salemanID = salemanService.importSaleman(saleman);
                    salemanIDs.add(salemanID);
                    totalSuccess++;
                }
            }catch (Exception ex) {
                log.error("Could not import outlet " + saleman.getCode(), ex);
            }

		}

        //Clear facing for outlet not specify in excel file
        //outletService.clearFacingOfOutletExcept(outletIds);

		CacheUtil.getInstance().remove(sessionId + SALEMAN_IMPORT_KEY);
		ModelAndView mav = new ModelAndView("/support/saleman/importReport");
		mav.addObject("success", true);
		mav.addObject("totalItems", importedSalemans.size());
		mav.addObject("totalSuccess", Integer.valueOf(totalSuccess));

		return mav;
	}




    private void extractExcelData2Outlets(String dbFileName, List<Saleman> importedSaleman, int sheetIndex) throws BiffException, IOException {
        WorkbookSettings ws = null;
		Workbook workbook = null;
		Sheet s = null;
		Cell rowData[] = null;
		int rowCount = 0;
		int columnCount = 0;
		DateCell dc = null;
		int totalSheet = 0;
        FileInputStream fs = new FileInputStream(new File(dbFileName));
        ws = new WorkbookSettings();
        ws.setLocale(new Locale("en", "EN"));
        workbook = Workbook.getWorkbook(fs, ws);
        s = workbook.getSheet(sheetIndex);
        rowCount = s.getRows();
        boolean beginParseSalemanData = false;
        for (int i = 0; i < rowCount; i++) {
            rowData = s.getRow(i);
            if (rowData.length == 0) {
                continue;
            }

            //Identify column header
            if (rowData[0].getContents().equals("STT")) {
                beginParseSalemanData = true;
            }else if (beginParseSalemanData) {

                int index = -1;
                Saleman saleman = new Saleman();
                saleman.setCode(rowData[COL_CODE].getContents());
                saleman.setName(rowData[COL_NAME].getContents());
                saleman.setType(rowData[COL_TYPE].getContents());
                saleman.setEmail(rowData[COL_EMAIL].getContents());
                saleman.setTelephone(rowData[COL_TELEPHONE].getContents());
                saleman.setCodeManager(rowData[COL_MANAGER].getContents());
                salemanValidator.validateImportSaleman(saleman);
                importedSaleman.add(saleman);
            }
        }
    }

    private List<OutletSaleman> editData(List<OutletSaleman> listOutletSaleman)
    {
        List<OutletSaleman> result = new ArrayList<OutletSaleman>();

        int i, j;
        for(i = 0; i < listOutletSaleman.size(); i ++)
        {
            int flag = 0;
            for(j = i + 1; j < listOutletSaleman.size(); j ++)
            {
                boolean flag1 = listOutletSaleman.get(j).getOutlet().getDmsCode().equals(listOutletSaleman.get(i).getOutlet().getDmsCode());
                boolean  flag2 = listOutletSaleman.get(j).getOutlet().getDistributor().getSapCode().equals(listOutletSaleman.get(i).getOutlet().getDistributor().getSapCode());
                if(flag1 && flag2)
                {
                    flag = 1;
                }
            }
            if(flag == 0)
            {
                result.add(listOutletSaleman.get(i));
            }

        }

        for(OutletSaleman outletSaleman : result)
        {
            HashMap<String,String> hashMap = new HashMap<String, String>();
            for(OutletSaleman outletSalemanList : listOutletSaleman)
            {
                if(outletSaleman.getOutlet().getOutletID() == outletSalemanList.getOutlet().getOutletID() && outletSalemanList.getToDate() == null)
                {
                    hashMap.put(outletSalemanList.getOutletbrand().getCode(), "x");
                }
            }
            outletSaleman.setHashSalemanOutletBrand(hashMap);
        }

        return result;
    }

    private void referenceData(ModelAndView mav)
    {
        mav.addObject("outletBrands", outletbrandService.findAll());
        mav.addObject("manages", salemanService.findAll());
    }

    private void ExportSalemanData(SalemanBean bean, HttpServletRequest request, HttpServletResponse response) {
           try
           {
               String outputFileName = "/files/temp/salemandata" + System.currentTimeMillis() + ".xls";
               String reportTemplate = request.getSession().getServletContext().getRealPath("/files/outlet/ExportSalemanTemplate.xls");
               String export2FileName = request.getSession().getServletContext().getRealPath(outputFileName);

               Workbook templateWorkbook = Workbook.getWorkbook(new File(reportTemplate));
               WritableWorkbook workbook = Workbook.createWorkbook(new File(export2FileName), templateWorkbook);
               WritableSheet sheet = workbook.getSheet(0);

               int startRow = 5;
               int stt = 1;
               List<Outletbrand> outletbrandList = outletbrandService.findAll();
               List<Outletbrandgroup> outletBrandGroupList = outletBrandGroupService.findAll();
               buildHeaderSummaryReport4Promotion(sheet, outletbrandList, outletBrandGroupList, 5, 3);
               for (Saleman saleman : bean.getListResult()) {
                   List<OutletSaleman> listOutletSaleman = outletSalemanService.findListBySalemanID(saleman.getSalemanID());
                   List<OutletSaleman> listOutletSaleman1 = editData(listOutletSaleman);
                   for(OutletSaleman outletSaleman : listOutletSaleman1)
                   {
                       CellValue[] cellValues = toCellValue4SummaryReport(saleman, outletSaleman, outletbrandList, outletBrandGroupList ,  stt);
                       stt ++;
                       ExcelUtil.addRow(sheet, startRow, cellValues);
                       startRow++;
                   }
               }

               workbook.write();
               workbook.close();

               response.sendRedirect(request.getSession().getServletContext().getContextPath() + outputFileName);
           }
           catch(Exception ex)
           {
               log.error(ex);
           }
       }


    private CellValue[] toCellValue4SummaryReport(Saleman saleman, OutletSaleman outletSaleman, List<Outletbrand> outletbrandList, List<Outletbrandgroup> outletBrandGroupList , Integer STT) {
        CellValue[] res = new CellValue[5 + outletbrandList.size()];

        res[0] =  new CellValue(CellDataType.INT, STT);
        res[1] =    new CellValue(CellDataType.STRING, saleman.getName());
        res[2] =    new CellValue(CellDataType.STRING, saleman.getCode());
        res[3] =    new CellValue(CellDataType.STRING, outletSaleman.getOutlet().getDmsCode());
        res[4] =    new CellValue(CellDataType.STRING, outletSaleman.getOutlet().getDistributor().getSapCode());

        int rowNextBrand = 5;
        for (int i = 0; i < outletBrandGroupList.size(); i++) {
            Outletbrandgroup outletBrandGroup = outletBrandGroupList.get(i);

            for(int j = 0; j < outletbrandList.size(); j ++)
            {
                Outletbrand outletbrand = outletbrandList.get(j);
                if(outletbrand.getOutletBrandGroup().getOutletBrandGroupID().equals(outletBrandGroup.getOutletBrandGroupID()))
                {
                    if(outletSaleman.getHashSalemanOutletBrand() != null && outletSaleman.getHashSalemanOutletBrand().get(outletbrand.getCode()) != null)
                    {
                        if(outletSaleman.getHashSalemanOutletBrand().get(outletbrand.getCode()).equals("x"))
                        {
                            res[rowNextBrand] = new CellValue(CellDataType.STRING, "x");
                        }
                        else
                        {
                            res[rowNextBrand] = new CellValue(CellDataType.STRING, "");
                        }
                    }
                    rowNextBrand ++;

                }

            }
        }

        return res;
    }

    private void buildHeaderSummaryReport4Promotion(WritableSheet sheet, List<Outletbrand> listOutletBrand, List<Outletbrandgroup> listOutletBrandGroup, int startCol, int startRow) throws WriteException {
        if(listOutletBrandGroup.size() > 0) {
            WritableCellFormat cellFormat = new WritableCellFormat();
            cellFormat.setWrap(true);
            cellFormat.setBorder(jxl.format.Border.ALL, jxl.format.BorderLineStyle.THIN);
            cellFormat.setBackground(Colour.BRIGHT_GREEN);

//            sheet.mergeCells(startCol, startRow, startCol + listOutletBrand.size() - 1, startRow);
            int rowNextBrand = 0;
            for (int i = 0; i < listOutletBrandGroup.size(); i++) {
                Outletbrandgroup outletBrandGroup = listOutletBrandGroup.get(i);



                int count = 0;
                for(int j = 0; j < listOutletBrand.size(); j ++)
                {
                    Outletbrand outletbrand = listOutletBrand.get(j);
                    if(outletbrand.getOutletBrandGroup().getOutletBrandGroupID().equals(outletBrandGroup.getOutletBrandGroupID()))
                    {
                        count ++;
                        Label outletBrandLabel = new Label(startCol + rowNextBrand, startRow + 1 , outletbrand.getName(), cellFormat);
                        sheet.addCell(outletBrandLabel);
                        rowNextBrand ++;
                    }
                }
                Label outletBrandGroupLabel = new Label(startCol + rowNextBrand - count  , startRow, outletBrandGroup.getName(), cellFormat);
                sheet.addCell(outletBrandGroupLabel);
                sheet.mergeCells(startCol + rowNextBrand - count   , startRow, startCol + rowNextBrand - 1, startRow);
            }
        }
    }


}
