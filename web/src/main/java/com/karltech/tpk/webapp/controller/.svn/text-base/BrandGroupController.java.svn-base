package com.banvien.fcv.webapp.controller;

import com.banvien.fcv.core.Constants;
import com.banvien.fcv.core.domain.Brandgroup;
import com.banvien.fcv.core.dto.BrandgroupBean;
import com.banvien.fcv.core.exception.DuplicateException;
import com.banvien.fcv.core.exception.ObjectNotFoundException;
import com.banvien.fcv.core.service.BrandgroupService;
import com.banvien.fcv.webapp.editor.CustomDateEditor;
import com.banvien.fcv.webapp.util.RequestUtil;
import com.banvien.fcv.webapp.validator.BrandgroupValidator;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.util.Date;
import java.util.List;

/**
 * Created by Ban Vien Ltd.
 * Author: Vien Nguyen (vien.nguyen@banvien.com)
 * Date: 6/16/12
 * Time: 11:59 AM
 */
@Controller
public class BrandGroupController extends ApplicationObjectSupport {
    private transient final Log log = LogFactory.getLog(getClass());

    @Autowired
    private BrandgroupService brandgroupService;

    @Autowired
    private BrandgroupValidator brandgroupValidator;

    @InitBinder
    public void initBinder(WebDataBinder binder) {
    	binder.registerCustomEditor(Date.class, new CustomDateEditor());
	}
    
    @RequestMapping("/support/brandgroup/edit.html")
	public ModelAndView edit(@ModelAttribute(Constants.FORM_MODEL_KEY) BrandgroupBean brandgroupBean, BindingResult bindingResult) {
		ModelAndView mav = new ModelAndView("/support/brandgroup/edit");

		String crudaction = brandgroupBean.getCrudaction();
		Brandgroup pojo = brandgroupBean.getPojo();
		if(StringUtils.isNotBlank(crudaction) && crudaction.equals("insert-update")) {
			try {
				//validate
				brandgroupValidator.validate(brandgroupBean, bindingResult);

				if(!bindingResult.hasErrors()) {
					if(pojo.getBrandGroupID() != null && pojo.getBrandGroupID() > 0) {
						this.brandgroupService.updateItem(brandgroupBean);
						mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.update.successful"));
					} else {
						this.brandgroupService.addNew(brandgroupBean);
						mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.add.successful"));
					}
					mav.addObject("success", true);

				}
			}catch (ObjectNotFoundException oe) {
				logger.error(oe.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.exception.keynotfound"));
			}catch (DuplicateException de) {
				logger.error(de.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("database.exception.duplicate"));
			}catch(Exception e) {
				logger.error(e.getMessage());
				mav.addObject("messageResponse", this.getMessageSourceAccessor().getMessage("general.exception.msg"));
			}
		}
		if(!bindingResult.hasErrors()&& brandgroupBean.getPojo().getBrandGroupID() != null && brandgroupBean.getPojo().getBrandGroupID() > 0) {
			try {
				Brandgroup itemObj = this.brandgroupService.findById(pojo.getBrandGroupID());
				brandgroupBean.setPojo(itemObj);
			}
			catch (Exception e) {
				logger.error("Could not found news " + brandgroupBean.getPojo().getBrandGroupID(), e);
			}
		}

		mav.addObject(Constants.FORM_MODEL_KEY, brandgroupBean);
		return mav;
	}


    @RequestMapping(value={"/support/brandgroup/list.html"})
    public ModelAndView list(BrandgroupBean bean, HttpServletRequest request) {
        ModelAndView mav = new ModelAndView("/support/brandgroup/list");
		if(StringUtils.isNotBlank(bean.getCrudaction()) && bean.getCrudaction().equals(Constants.ACTION_DELETE)) {
			Integer totalDeleted = 0;
			try {
				totalDeleted = brandgroupService.deleteItems(bean.getCheckList());
				mav.addObject("totalDeleted", totalDeleted);
			}catch (Exception e) {
				log.error(e.getMessage());
				mav.addObject(Constants.MESSAGE_RESPONSE_MODEL_KEY, this.getMessageSourceAccessor().getMessage("database.multipledelete.exception"));
			}
		}
        executeSearch(bean, request);
        mav.addObject(Constants.LIST_MODEL_KEY, bean);
        return mav;
    }

    private void executeSearch(BrandgroupBean bean, HttpServletRequest request) {
        RequestUtil.initSearchBean(request, bean);

        Object[] results = this.brandgroupService.search(bean);
        bean.setListResult((List<Brandgroup>)results[1]);
        bean.setTotalItems(Integer.valueOf(results[0].toString()));
    }
}
