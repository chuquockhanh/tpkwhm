package com.banvien.fcv.webapp.controller;

import com.banvien.fcv.core.Constants;
import com.banvien.fcv.core.domain.Distributor;
import com.banvien.fcv.core.domain.District;
import com.banvien.fcv.core.domain.Region;
import com.banvien.fcv.core.dto.OutletImportBean;
import com.banvien.fcv.core.dto.OutletImportDTO;
import com.banvien.fcv.core.service.DistributorService;
import com.banvien.fcv.core.service.DistrictService;
import com.banvien.fcv.core.service.OutletService;
import com.banvien.fcv.core.service.SalemanService;
import com.banvien.fcv.core.util.CacheUtil;
import com.banvien.fcv.webapp.editor.CustomDateEditor;
import com.banvien.fcv.webapp.editor.PojoEditor;
import com.banvien.fcv.webapp.util.CommonUtil;
import com.banvien.fcv.webapp.util.ExcelUtil;
import com.banvien.fcv.webapp.util.FileUtils;
import com.banvien.fcv.webapp.util.RequestUtil;
import com.banvien.fcv.webapp.validator.OutletValidator;
import jxl.*;
import jxl.read.biff.BiffException;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

/**
 * Created by Ban Vien Ltd.
 * Author: Vien Nguyen (vien.nguyen@banvien.com)
 * Date: 6/16/12
 * Time: 11:59 AM
 */
@Controller
public class OutletSalemanImportController extends ApplicationObjectSupport {
    private transient final Log log = LogFactory.getLog(getClass());

    // COLUM
    private static final int COL_DISTRIBUTOR = 1;
    private static final int COL_SAPCODE = 8;
    private static final int COL_NAMESALEMAN= 3;
    private static final int COL_DISTRICT= 4;
    private static final int COL_WARD= 5;

    private static final int COL_ADDRESS = 6;
    private static final int COL_DMSCODE = 7;
    private static final int COL_SAL = 2;

    // SHEET
    private static final int FRISO_SHEET_INDEX = 0;

    // ROW
    private static final int ROW_OUTLET_BRAND = 2;

    private static final String OUTLET_SALEMAN_IMPORT_KEY = "OutletSalemanImportKey";


    @Autowired
    private OutletService outletService;

    @Autowired
    private OutletValidator outletValidator;

    @Autowired
    private DistributorService distributorService;

    @Autowired
    private DistrictService districtService;

    @Autowired
    private SalemanService salemanService;

    @InitBinder
    public void initBinder(WebDataBinder binder) {
    	binder.registerCustomEditor(Date.class, new CustomDateEditor());
        binder.registerCustomEditor(Region.class, new PojoEditor(Region.class, "regionID", Long.class));
        binder.registerCustomEditor(District.class, new PojoEditor(District.class, "districtID", Long.class));
        binder.registerCustomEditor(Distributor.class, new PojoEditor(Distributor.class, "distributorID", Long.class));

	}
    
    
    @RequestMapping(value={"/support/outletsaleman/import.html"})
    public ModelAndView importData(OutletImportBean bean, HttpServletRequest request) throws IOException, ServletException {
        ModelAndView mav = new ModelAndView("/support/outletsaleman/import");
        mav.addObject(Constants.FORM_MODEL_KEY, bean);
        if (RequestMethod.GET.toString().equals(request.getMethod())) {
			//Clear cache
			CacheUtil.getInstance().remove(request.getSession().getId() + OUTLET_SALEMAN_IMPORT_KEY);
		} else if (RequestMethod.POST.toString().equals(request.getMethod())) {
            try{
                if(StringUtils.isNotBlank(bean.getCrudaction()) && bean.getCrudaction().equals(Constants.ACTION_IMPORT)) {
                    String destFolder = CommonUtil.getBaseFolder() + CommonUtil.getTempFolderName();
                    MultipartHttpServletRequest mRequest = (MultipartHttpServletRequest) request;
                    Map<String, MultipartFile> map = mRequest.getFileMap();
                    MultipartFile csvfile = (MultipartFile) map.get("dataFile");
                    String fileName = FileUtils.upload(mRequest, destFolder, csvfile);
                    String destFileName = request.getSession().getServletContext().getRealPath(destFolder + "/" + fileName);

                    List<OutletImportDTO> importedOutlets = new ArrayList<OutletImportDTO>();
                    extractExcelData2Outlets(destFileName, importedOutlets, FRISO_SHEET_INDEX);

                    log.debug("Remove temp file: " + destFileName);
                    try{
                        FileUtils.remove(destFileName);
                    }catch (Exception e) {
                        log.debug("Temporary File could not be deleted" + e.getMessage());
                    }
                    String sessionId = request.getSession().getId();
                    CacheUtil.getInstance().putValue(sessionId + OUTLET_SALEMAN_IMPORT_KEY, importedOutlets);
                }
                mav = new ModelAndView("redirect:/support/outletsaleman/importlist.html");
            }catch (Exception ex) {
                mav = new ModelAndView("/support/outletsaleman/import");
                mav.addObject(Constants.FORM_MODEL_KEY, bean);
                mav.addObject("messageResponse", "Could not extract excel data");
            }
        }

        return mav;
    }

    private void extractExcelData2Outlets(String dbFileName, List<OutletImportDTO> importedOutlets, int sheetIndex) throws BiffException, IOException {
        WorkbookSettings ws = null;
		Workbook workbook = null;
		Sheet s = null;
		Cell rowData[] = null;
		int rowCount = 0;
		int columnCount = 0;
		DateCell dc = null;
		int totalSheet = 0;
        FileInputStream fs = new FileInputStream(new File(dbFileName));
        ws = new WorkbookSettings();
        ExcelUtil.setEncoding4Workbook(ws);
//        ws.setLocale(new Locale("en", "EN"));
        workbook = Workbook.getWorkbook(fs, ws);
        s = workbook.getSheet(sheetIndex);
        rowCount = s.getRows();
        columnCount = s.getColumns();
        Cell rowHeader[] = s.getRow(ROW_OUTLET_BRAND);
        boolean beginParseOutletData = false;
        for (int i = 0; i < rowCount; i++) {
            rowData = s.getRow(i);
            if (rowData.length == 0) {
                continue;
            }

            //Identify column header
            if (rowData[0].getContents().equals("STT")) {
                beginParseOutletData = true;
            }else if (beginParseOutletData) {
                if (StringUtils.isNotBlank(rowData[COL_SAPCODE].getContents()) && StringUtils.isNotBlank(rowData[COL_DMSCODE].getContents())) {
                    int index = -1;
                    OutletImportDTO outletImportDTO = null;
                    String sapCode = rowData[COL_SAPCODE].getContents();
                    String dmsCode = rowData[COL_DMSCODE].getContents();
                    for (int j = 0; j < importedOutlets.size(); j++) {
                        OutletImportDTO temp = importedOutlets.get(j);
                        if (temp.getDmsCode().equals(dmsCode) && temp.getSapCode().equals(sapCode)) {
                            outletImportDTO = temp;
                            index = j;
                            break;
                        }
                    }
                    if (outletImportDTO == null) {
                        outletImportDTO = new OutletImportDTO();
                    }

                    outletImportDTO.setDistributor(rowData[COL_DISTRIBUTOR].getContents());
                    outletImportDTO.setSapCode(rowData[COL_SAPCODE].getContents());
                    outletImportDTO.setDistrict(rowData[COL_DISTRICT].getContents());
                    outletImportDTO.setWard(rowData[COL_WARD].getContents());
                    outletImportDTO.setAddress(rowData[COL_ADDRESS].getContents());
                    outletImportDTO.setDmsCode(rowData[COL_DMSCODE].getContents());
                    outletImportDTO.setSalemans(rowData[COL_SAL].getContents());

                    for(int indexOutletBrand = COL_SAPCODE + 1 ; indexOutletBrand < columnCount; indexOutletBrand ++)
                    {
                        if(rowData[indexOutletBrand].getContents().equals("x") || rowData[indexOutletBrand].getContents().equals("X"))
                        {
                            outletImportDTO.getHashSalemanOutletBrand().put(rowHeader[indexOutletBrand].getContents(),1);
                        }
                        else
                        {
                            outletImportDTO.getHashSalemanOutletBrand().put(rowHeader[indexOutletBrand].getContents(),0);
                        }
                    }

                    if(outletValidator.validateImportSaleman(outletImportDTO) == -1)
                    {
                        outletImportDTO.setValidate("Fail");
                    }
                    else
                    {
                        outletImportDTO.setValidate("Pass");
                    }

                    if (index >= 0) {
                        importedOutlets.set(index, outletImportDTO);
                    }else{
                        importedOutlets.add(outletImportDTO);
                    }
                }
            }
        }
    }

    @RequestMapping(value="/support/outletsaleman/importlist.html", method=RequestMethod.GET)
    public ModelAndView importOutletList(HttpServletRequest request, OutletImportBean bean) throws Exception {
		String sessionId = request.getSession().getId();
		List<OutletImportDTO> importedOutlets = (List<OutletImportDTO>) CacheUtil.getInstance().getValue(sessionId + OUTLET_SALEMAN_IMPORT_KEY);
		if (importedOutlets == null || importedOutlets.size() == 0) {
			return new ModelAndView("redirect:/support/outletsaleman/import.html");
		}

		List<OutletImportDTO> displayOutlets = importedOutlets;

		RequestUtil.initSearchBean(request, bean);
        if (displayOutlets.size() > 0) {
	        Integer lastIndex = bean.getPage() * bean.getMaxPageItems();
	        if (lastIndex > displayOutlets.size()) {
	        	lastIndex = displayOutlets.size();
	        }
	        if (bean.getFirstItem() > displayOutlets.size()) {
	        	bean.setFirstItem(0);
	        }

        	bean.setListResult((List<OutletImportDTO>) displayOutlets.subList(bean.getFirstItem(), lastIndex));
        }
        bean.setTotalItems(displayOutlets.size());

		return new ModelAndView("/support/outletsaleman/importList", Constants.LIST_MODEL_KEY, bean);
	}
    
    @RequestMapping(value="/support/outletsaleman/importsave.html", method=RequestMethod.GET)
    public ModelAndView importOutletSave(HttpServletRequest request, OutletImportBean bean) throws Exception {
		String sessionId = request.getSession().getId();
		List<OutletImportDTO> importedOutlets = (List<OutletImportDTO>) CacheUtil.getInstance().getValue(sessionId + OUTLET_SALEMAN_IMPORT_KEY);
		if (importedOutlets == null || importedOutlets.size() == 0) {
			return new ModelAndView("redirect:/support/outletsaleman/import.html");
		}
		
		/**
		 * Save/update outlets
		 */
		int totalSuccess = 0;
        List<Long> outletIds = new ArrayList<Long>();
		for (OutletImportDTO outletImport : importedOutlets) {
            try{
                Long outletID = outletService.importOutletSaleman(outletImport);
                outletIds.add(outletID);
                totalSuccess++;
            }catch (Exception ex) {
                log.error("Could not import outlet " + outletImport.getSapCode() + " - " + outletImport.getDmsCode(), ex);
            }

		}

        //Clear facing for outlet not specify in excel file
        //outletService.clearFacingOfOutletExcept(outletIds);
	
		CacheUtil.getInstance().remove(sessionId + OUTLET_SALEMAN_IMPORT_KEY);
		ModelAndView mav = new ModelAndView("/support/outletsaleman/importReport");
		mav.addObject("success", true);
		mav.addObject("totalItems", importedOutlets.size());
		mav.addObject("totalSuccess", Integer.valueOf(totalSuccess));

		return mav;
	}

}
